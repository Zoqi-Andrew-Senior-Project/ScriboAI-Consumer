name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: PROD
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "+++++++++++++++"
            echo "üõª Pulling changes......."
            echo "+++++++++++++++"

            cd ~/AI-Training-Consumer/
            git pull || { echo -e " ++++++++++++++++++++++++\n‚ùå Error pulling changes! ‚ùå \n ++++++++++++++++++++++++"; exit 1; }
                      
            echo "+++++++++++++++"
            echo "üìÑ Creating frontend .env file......."
            echo "+++++++++++++++"

            echo "+++++++++++++++"
            echo "üìÑ Creating backend .env file......."
            echo "+++++++++++++++"

            cat > ~/AI-Training-Consumer/.env <<EOF
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            DJANGO_SECRET=${{ secrets.DJANO_SECRET }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DEBUG=${{ secrets.DEBUG }}
            FRONTEND_ADDRESS=${{ secrets.FRONTEND_ADDRESS }}
            NGINX_SERVER_NAME=${{ secrets.NGINX_SERVER_NAME }}
            REACT_APP_HUGGINGFACE_ADDRESS=${{ secrets.REACT_APP_HUGGINGFACE_ADDRESS }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_DB=${{ secrets.REDIS_DB }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            VITE_BACKEND_ADDRESS=${{ secrets.VITE_BACKEND_ADDRESS }}
            VITE_WS_BACKEND=${{ secrets.VITE_WS_BACKEND }}
            EOF

            echo "+++++++++++++++"
            echo "üèóÔ∏è Composing docker setup......."
            echo "+++++++++++++++"

            cd ~/AI-Training-Consumer/

            docker compose down || { echo -e " ++++++++++++++++++++++++\n‚ùå Error composing down! ‚ùå \n ++++++++++++++++++++++++"; exit 1; }

            docker volume prune || { echo -e " ++++++++++++++++++++++++\n‚ùå Error pruning volumes! ‚ùå \n ++++++++++++++++++++++++"; exit 1; }

            docker image prune || { echo -e " ++++++++++++++++++++++++\n‚ùå Error pruning images! ‚ùå \n ++++++++++++++++++++++++"; exit 1; }

            VOLUME_NAME=ai-training-consumer_frontend_build
            if docker volume inspect "$VOLUME_NAME" > /dev/null 2>&1; then
              if docker volume rm "$VOLUME_NAME"; then
                echo "‚úÖ Successfully removed volume: $VOLUME_NAME"
              else
                echo -e "++++++++++++++++++++++++\n‚ùå Error removing frontend volume! ‚ùå\n++++++++++++++++++++++++"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è  Volume '$VOLUME_NAME' does not exist, skipping removal."
            fi
            docker compose up --build -d || { echo -e " ++++++++++++++++++++++++\n‚ùå Error composing up! ‚ùå \n ++++++++++++++++++++++++"; exit 1; }

            echo "+++++++++++++++"
            echo "üßπ Pruning unused Docker resources......."
            echo "+++++++++++++++"
            docker system prune -f || { echo -e " ++++++++++++++++++++++++\n‚ùå Error pruning Docker resources! ‚ùå \n ++++++++++++++++++++++++"; exit 1; }
