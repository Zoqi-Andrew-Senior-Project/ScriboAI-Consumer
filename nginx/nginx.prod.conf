worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Enable SSL
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256';

    server {
        listen 80;
        server_name $NGINX_SERVER_NAME;

        # Redirect HTTP to HTTPS
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;  # Directory for certbot's challenge
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name $NGINX_SERVER_NAME;

        # SSL certificate paths
        ssl_certificate /etc/letsencrypt/live/$NGINX_SERVER_NAME/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/$NGINX_SERVER_NAME/privkey.pem;

        # Add security headers for improved security
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Root directory for serving the frontend (static files)
        root /usr/share/nginx/html;
        index index.html;

        # Handle routing to the frontend (SPA)
        location / {
            try_files $uri /index.html;
        }

        # API proxy to backend service
        location /api/ {
            proxy_pass http://backend:8000;  # Proxy API requests to the backend container
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port 443;

            # Enable CORS headers
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Authorization, Content-Type, Accept';
            
            # Handle OPTIONS requests for preflight (CORS)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Origin, Authorization, Content-Type, Accept';
                return 204;
            }
        }

        # Fallback for missing resources (404)
        error_page 404 /index.html;
    }
}

